@model IEnumerable<MyECommerce.Models.Product>

@{
    ViewData["Title"] = "Shop";
}



<!--shop section start-->
<section class="shop-section bg-white ptb-120">
    <div class="container">
        <div class="row g-4">
            <div class="col-xl-3 order-2 order-xl-1">
                <div class="shop-sidebar pe-xl-5 mt-5 mt-xl-0">
                    <!-- ✅ Search Box -->
                    <div class="sidebar-widget search-widget">
                        <form>
                            <input type="text" id="searchInput" placeholder="Search Here..." class="theme-input fw-light">
                        </form>
                    </div>
                    <!-- ✅ Reset Filters Button (Better Placement) -->
                    <div class="sidebar-widget text-center mt-40">
                        <button id="resetFilters" class="btn btn-danger btn-lg w-100">
                            <i class="fas fa-sync-alt me-2"></i> Reset Filters
                        </button>
                    </div>

                    <!-- ✅ Categories -->
                    <div class="sidebar-widget categories-widget mt-60">
                        <h4 class="widget-title position-relative fw-normal mb-5">Categories</h4>
                        <ul class="sidebar-check-fields">
                            @foreach (var category in ViewBag.Categories)
                            {
                                <li>
                                    <label>
                                        <input type="checkbox" class="category-filter" value="@category.Id">
                                        <span>@category.Name</span>
                                    </label>
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="sidebar-widget filter-widget mt-60">
                        <h4 class="widget-title position-relative mb-5">Filter by price</h4>
                        <div class="ur-pricing-range"></div>

                        <form action="#" class="d-flex align-items-center justify-content-between mt-4">
                            <p class="mb-0">
                                <label for="amount">Price:</label>
                                <input type="text" id="amount" readonly>
                            </p>
                            <button type="submit" class="submit-btn">Filter<span class="ms-2"><i class="fas fa-arrow-right"></i></span></button>
                        </form>
                    </div>

                    <div class="sidebar-widget color-select-widget mt-40">
                        <h4 class="widget-title position-relative mb-5">Available Color</h4>
                        <ul class="color-select">
                            <li><label><input  class="color-filter" value="Soft Gold"><span class="bg-soft-gold">Soft Gold <span></span></span></label></li>
                            <li><label><input  class="color-filter" value="Light Pink"><span class="bg-light-pink">Light Pink <span></span></span></label></li>
                            <li><label><input  class="color-filter" value="Green Touch"><span class="bg-green-touch">Green Touch <span></span></span></label></li>
                            <li><label><input  class="color-filter" value="Navy Blue"><span class="bg-navy-blue">Navy Blue <span></span></span></label></li>
                            <li><label><input  class="color-filter" value="Gray White"><span class="bg-gray-white">Gray White <span></span></span></label></li>
                        </ul>
                    </div>
                    <div class="sidebar-widget brand-widget mt-60">
                        <h4 class="widget-title position-relative fw-normal mb-5">Brands</h4>
                        <ul class="sidebar-check-fields">
                            @if (ViewBag.Brands is List<MyECommerce.Models.Brand> brands && brands.Any())
                            {
                                @foreach (var brand in brands)
                                {
                                    <li>
                                        <label>
                                            <input type="checkbox" class="brand-filter" value="@brand.Id" checked>
                                            <span>@brand.Name</span>
                                        </label>
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="text-center text-muted">No brands available.</li>
                            }
                        </ul>
                    </div>
                    <div class="sidebar-widget products-widget mt-60">
                        <h4 class="widget-title position-relative mb-5">Latest Products</h4>
                        <ul class="sidebar-products">
                            @if (ViewBag.LatestProducts is List<MyECommerce.Models.Product> latestProducts && latestProducts.Any())
                            {
                                @foreach (var product in latestProducts)
                                {
                                    <li class="d-flex align-items-center gap-4">
                                        <div class="flex-shrink-0 thumbnail light-bg p-3">
                                            <a href="@Url.Action("Details", "Product", new { id = product.Id })">
                                                <img src="@product.ImageUrl" alt="@product.Name" class="img-fluid">
                                            </a>
                                        </div>
                                        <div>
                                            <a href="@Url.Action("Details", "Product", new { id = product.Id })">
                                                <h6 class="mb-3">@product.Name</h6>
                                            </a>
                                            <span class="price primary-text-color">₹@product.Price</span>
                                        </div>
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="text-center text-muted">No latest products available.</li>
                            }
                        </ul>
                    </div>


                </div>
            </div>

            <div class="col-xl-9 order-1 order-xl-2">
                <div class="shop-grid">
                    <div class="d-flex align-items-center justify-content-between gap-3 flex-wrap">
                        <p id="pagination-summary" class="mb-0 fw-light">
                            Showing @(((ViewBag.CurrentPage - 1) * ViewBag.PageSize) + 1)
                            - @Math.Min(ViewBag.CurrentPage * ViewBag.PageSize, ViewBag.TotalRecords)
                            of @ViewBag.TotalRecords results
                            (Page @ViewBag.CurrentPage of @ViewBag.TotalPages)
                        </p>

                        <div class="d-flex align-items-center gap-4">
                            <div class="select-wrapper">
                                <select id="sortOptions" class="nice_select">
                                    <option value="">Default Sorting</option>
                                    <option value="price_asc">Sort by Price (Min to Max)</option>
                                    <option value="price_desc">Sort by Price (Max to Min)</option>
                                </select>
                            </div>
                        </div>
                    </div>



                    <div class="products-grid mt-40">
                        <div class="row g-4" id="productList">
                            @foreach (var product in Model)
                            {
                                <div class="col-lg-4 col-md-6">
                                    <div class="vr5-product-card">
                                        <div class="feature-image position-relative h-300">
                                            <img src="@product.ImageUrl" alt="@product.Name" class="img-fluid">
                                            <div class="action-box">
                                                <a href="javascript:void(0)" class="cart-btn add-to-cart" data-id="@product.Id">
                                                    Add to Cart
                                                </a>
                                                <div class="action-btns">
                                                    <a href="javascript:void(0)" class="wishlist-btn add-to-wishlist" data-id="@product.Id">
                                                        <i class="fa-regular fa-heart"></i>
                                                    </a>

                                                    <!-- ✅ Quick View Button -->
                                                    <a href="#" class="quick-view-btn" data-bs-toggle="modal" data-bs-target="#product_view"
                                                       data-id="@product.Id"
                                                       data-name="@product.Name"
                                                       data-image="@product.ImageUrl"
                                                       data-price="@product.Price"
                                                       data-description="@product.Description">
                                                        <svg width="17" height="13" viewBox="0 0 17 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M12.375 6.75C12.375 8.69141 10.7891 10.25 8.875 10.25C6.93359 10.25 5.375 8.69141 5.375 6.75C5.375 4.83594 6.93359 3.25 8.875 3.25C10.7891 3.25 12.375 4.83594 12.375 6.75ZM8.875 4.125C7.39844 4.125 6.25 5.30078 6.25 6.75C6.25 8.19922 7.39844 9.375 8.875 9.375C10.3242 9.375 11.5 8.19922 11.5 6.75C11.5 5.30078 10.3242 4.125 8.875 4.125ZM14.125 2.83984C15.4102 4.01562 16.2578 5.4375 16.668 6.42188C16.75 6.64062 16.75 6.88672 16.668 7.10547C16.2578 8.0625 15.4102 9.48438 14.125 10.6875C12.8398 11.8906 11.0625 12.875 8.875 12.875C6.66016 12.875 4.88281 11.8906 3.59766 10.6875C2.3125 9.48438 1.46484 8.0625 1.05469 7.10547C0.972656 6.88672 0.972656 6.64062 1.05469 6.42188C1.46484 5.4375 2.3125 4.01562 3.59766 2.83984C4.88281 1.63672 6.66016 0.625 8.875 0.625C11.0625 0.625 12.8398 1.63672 14.125 2.83984ZM1.875 6.75C2.23047 7.625 3.02344 8.9375 4.19922 10.0312C5.375 11.125 6.93359 12 8.875 12C10.7891 12 12.3477 11.125 13.5234 10.0312C14.6992 8.9375 15.4922 7.625 15.875 6.75C15.4922 5.875 14.6992 4.5625 13.5234 3.46875C12.3477 2.375 10.7891 1.5 8.875 1.5C6.93359 1.5 5.375 2.375 4.19922 3.46875C3.02344 4.5625 2.23047 5.875 1.875 6.75Z" fill="#121111" />
                                                        </svg>
                                                    </a>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="product-content">
                                            <span class="fw-semibold subtitle text-uppercase">@product?.Category?.Name</span>
                                            @if (product != null && product.Id > 0)
                                            {
                                                <a asp-action="Details" asp-controller="Product" asp-route-id="@product.Id">
                                                    <h6 class="fw-semibold mt-3">@product.Name</h6>
                                                </a>
                                            }
                                            <!-- ✅ Truncate description -->
                                            <p class="fs-sm mb-4 text-truncate" style="max-height: 50px; overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                                                @product?.Description
                                            </p>

                                            <span class="text-main-color fw-bold fs-sm">₹@product?.Price</span>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    <!-- ✅ Pagination Section -->
                    <div class="text-center mt-60">
                        <ul class="template-pagination d-inline-flex align-items-center gap-3" id="paginationContainer">
                            @for (int i = 1; i <= ViewBag.TotalPages; i++)
                            {
                                <li>
                                    <a href="#" class="pagination-link @(ViewBag.CurrentPage == i ? "active" : "")" data-page="@i">
                                        @i
                                    </a>
                                </li>
                            }

                            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                            {
                                <li>
                                    <a href="#" class="pagination-link" data-page="@(ViewBag.CurrentPage + 1)">
                                        <i class="fa-solid fa-angles-right"></i>
                                    </a>
                                </li>
                            }
                        </ul>
                    </div>



                </div>
            </div>
        </div>
    </div>
</section>
<!--shop section end-->
<!-- ✅ Quick View Modal -->
<div class="modal fade" id="product_view" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            <div class="row">
                <!-- ✅ Product Image -->
                <div class="col-xl-6">
                    <div class="vr-product-double-slider">
                        <div class="vr-product-thumb position-relative">
                            <span class="badge sale-badge">Sale</span>
                            <div class="vr-product-thumb position-relative">
                                <img id="modalProductImage" src="" alt="product" class="img-fluid">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- ✅ Product Details -->
                <div class="col-xl-6">
                    <div class="vr-product-details-content mt-5 mt-xl-0">
                        <h3 id="modalProductName" class="mb-4 fw-semibold"></h3>
                        <div class="product-rating">
                            <ul class="rating-star d-inline-flex">
                                <li><i class="fas fa-star"></i></li>
                                <li><i class="fas fa-star"></i></li>
                                <li><i class="fas fa-star"></i></li>
                                <li><i class="fas fa-star"></i></li>
                                <li><i class="fas fa-star"></i></li>
                            </ul>
                            <span class="fs-sm">(3 Customer Reviews)</span>
                        </div>
                        <h5 id="modalProductPrice" class="mb-0 mt-30 text-main-color"></h5>
                        <p id="modalProductDescription" class="mb-40 mt-30"></p>

                        <!-- ✅ Quantity Input -->
                        <div class="d-flex align-items-center mt-30 gap-3">
                            <div class="quantity-box">
                                <button type="button" class="decrement"><i class="fa-solid fa-minus"></i></button>
                                <input type="number" id="modalProductQuantity" value="1" min="1">
                                <button type="button" class="increment"><i class="fa-solid fa-plus"></i></button>
                            </div>
                        </div>

                        <!-- ✅ Add to Cart Form -->
                        <form id="addToCartForm" action="/ShoppingCart/AddToCart" method="post">
                            <input type="hidden" id="modalProductId" name="productId">
                            <input type="hidden" id="modalProductQuantityHidden" name="quantity" value="1">
                            <button type="submit" class="template-btn primary-btn fs-sm text-uppercase h-40 w-100 mt-3">
                                Add To Cart
                            </button>
                        </form>
                        <a href="javascript:void(0)" class="pd-wishlist-btn text-uppercase mt-30 add-to-wishlist-modal"
                           data-id="">
                            <i class="fa-regular fa-heart"></i> Add to Wishlist
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- ✅ JavaScript to Fill Modal -->
<script>

        let currentPage = 1; // ✅ Set default value
        let currentSortOption = "";


    $(document).ready(function () {
         console.log("✅ Document Ready!");
         $(document).on("click", ".increment", function () {
        let quantityInput = $("#modalProductQuantity");
        let currentValue = parseInt(quantityInput.val());
        quantityInput.val(currentValue + 1);
        $("#modalProductQuantityHidden").val(currentValue + 1); // Update hidden input
    });

    // ✅ Decrement Quantity in Quick View Modal
    $(document).on("click", ".decrement", function () {
        let quantityInput = $("#modalProductQuantity");
        let currentValue = parseInt(quantityInput.val());
        if (currentValue > 1) {
            quantityInput.val(currentValue - 1);
            $("#modalProductQuantityHidden").val(currentValue - 1); // Update hidden input
        }
    });

    // ✅ Populate Quick View Modal with Product Data
    $(document).on("click", ".quick-view-btn", function () {
        let productId = $(this).data("id");
        let productName = $(this).data("name");
        let productPrice = $(this).data("price");
        let productImage = $(this).data("image");
        let productDescription = $(this).data("description");

        // Populate modal fields
        $("#modalProductId").val(productId);
        $("#modalProductName").text(productName);
        $("#modalProductPrice").text("$" + productPrice);
        $("#modalProductImage").attr("src", productImage);
        $("#modalProductDescription").text(productDescription);

        // Reset quantity to 1
        $("#modalProductQuantity").val(1);
        $("#modalProductQuantityHidden").val(1);

         $(".add-to-wishlist-modal").attr("data-id", productId);

        // Open the modal
        $("#product_view").modal("show");
    });

    // ✅ Handle Add to Cart Form Submission
    $("#addToCartForm").off("submit").on("submit", function (event) {
        event.preventDefault();

        let quantity = $("#modalProductQuantity").val();
        $("#modalProductQuantityHidden").val(quantity);

        let formData = $(this).serialize();

        $.post("/ShoppingCart/AddToCart", formData, function (response) {
            if (response.success) {
                alert(response.message);
                updateCartCount(); // ✅ Update header cart count & total price
                updateCartDrawer(response.cartItems, response.totalPrice);
                $("#product_view").modal("hide");
            } else {
                alert(response.message || "Something went wrong!");
            }
        }).fail(function () {
            alert("Error adding product to cart. Please try again!");
        });
    });
    function updateCartCount() {
        $.get("/ShoppingCart/GetCartSummary", function (response) {
            if (response.success) {
                $(".cart-item-count").text(response.count); // Update cart icon count
                $(".cart-amount").text("$" + response.totalPrice.toFixed(2)); // Update cart total price
            } else {
                console.error("Failed to update cart count.");
            }
        }).fail(function () {
            console.error("Error fetching cart summary.");
        });
    }

    function updateCartDrawer(cartItems, totalPrice) {
        let cartList = $(".cart-list");
        let cartCount = $("#cart-count");
        let totalAmount = $("#cart-total");

        cartList.empty(); // Clear previous items

        if (cartItems.length === 0) {
            cartList.append("<li class='text-center py-3'>Your cart is empty</li>");
            cartCount.text("0");
            totalAmount.text("$0.00");
            return;
        }

        cartCount.text(cartItems.length); // Update cart count
        totalAmount.text("$" + totalPrice.toFixed(2)); // Update total price

        cartItems.forEach(item => {
            let itemPrice = item.price * item.quantity;

            let cartItemHTML = `
                <li class="d-flex align-items-center gap-3">
                    <div class="feature-image light-bg">
                        <a href="#"><img src="${item.imageUrl}" alt="${item.name}" class="img-fluid"></a>
                    </div>
                    <div class="d-flex justify-content-between gap-3 w-100">
                        <div>
                            <a href="#"><h6 class="mb-1">${item.name}</h6></a>
                            <span class="price fw-medium secondary-text-color d-block mb-1 fs-sm">$${itemPrice.toFixed(2)}</span>
                            <div class="quantity d-flex align-items-center">
                                <input type="text" value="${item.quantity}" readonly>
                            </div>
                        </div>
                        <div>
                            <a href="javascript:void(0)" class="close remove-item" data-id="${item.id}"><i class="fas fa-xmark"></i></a>
                        </div>
                    </div>
                </li>
            `;
            cartList.append(cartItemHTML);
        });
    }


    $(document).off("click", ".add-to-wishlist").on("click", ".add-to-wishlist, .add-to-wishlist-modal", function (event) {
        event.preventDefault();
        let productId = $(this).data("id");
        let wishlistButton = $(this);

        $.post("/Wishlist/AddToWishlist", { productId: productId }, function (response) {
            if (response.success) {
                alert(response.message);
                updateWishlistCount();

                // ✅ Change button appearance for both
                wishlistButton.html('<i class="fa-solid fa-heart text-danger"></i>');
            } else {
                alert(response.message);
            }
        }).fail(function () {
            alert("Error adding to wishlist. Please try again.");
        });
    });




        function updateWishlistCount() {
        $.get("/Wishlist/GetWishlistCount", function (response) {
            if (response.success) {
                $(".wishlist-count-badge").text(response.count); // ✅ Update the wishlist count in the header
            }
        });
    }






    });

    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll(".quick-view-btn").forEach(button => {
            button.addEventListener("click", function () {
                const name = this.getAttribute("data-name");
                const image = this.getAttribute("data-image");
                const price = this.getAttribute("data-price");
                const description = this.getAttribute("data-description");

                document.getElementById("modalProductName").textContent = name;
                document.getElementById("modalProductImage").src = image;
                document.getElementById("modalProductPrice").textContent = "$" + price;
                document.getElementById("modalProductDescription").textContent = description;
            });
        });

    });




    document.addEventListener("DOMContentLoaded", function () {
        let searchInput = document.getElementById("searchInput");
        let applyPriceFilter = false;

             $("#resetFilters").on("click", function () {
            console.log("🔄 Reset Filters Clicked!");

            // ✅ Clear Search Input
            $("#searchInput").val("");

            // ✅ Uncheck All Category Filters
            $(".category-filter").prop("checked", false);

            // ✅ Uncheck All Brand Filters
            $(".brand-filter").prop("checked", false);

            // ✅ Reset Price Range Slider
            $(".ur-pricing-range").slider("values", [0, 50000]);
            $("#amount").val("₹0 - ₹50000");

            // ✅ Reset Sorting Option
            $("#sortOptions").val(""); // Assuming "" is the default option
            currentSortOption = ""; // Reset global sort variable

            // ✅ Reload Products with Default Filters
            filterProducts("", false, 1, "");
        });

        $(".ur-pricing-range").slider({
            range: true,
            min: 0,
            max: 50000, // Adjust max price as needed
            values: [0, 50000], // Default price range
            slide: function (event, ui) {
                $("#amount").val("₹" + ui.values[0] + " - ₹" + ui.values[1]);
            }
        });

        $("#amount").val("₹" + $(".ur-pricing-range").slider("values", 0) +
            " - ₹" + $(".ur-pricing-range").slider("values", 1));

        // ✅ Attach event listener to Filter button ONLY for price filtering
    $(".submit-btn").on("click", function (event) {
        event.preventDefault();
        console.log("💰 Price Filter Button Clicked!");
        applyPriceFilter = true; // ✅ Enable price filtering only when button is clicked
        filterProducts($("#searchInput").val().trim(), applyPriceFilter);
    });


        // ✅ Attach event listeners for Search & Category Filters
    $(document).on("input", "#searchInput", function () {
        let searchValue = $(this).val().trim();
        console.log("🔍 Captured Search Value:", searchValue); // ✅ Debugging

        filterProducts(searchValue, false); // ✅ Pass searchValue correctly
    });

    $(".brand-filter").change(function () {
           if ($(".brand-filter:checked").length === 0) {
               alert("At least one brand must be selected.");
               $(this).prop("checked", true);
           } else {
               filterProducts($("#searchInput").val().trim(), false);
           }
       });




    $(".category-filter").on("change", function () {
        applyPriceFilter = false; // ❌ Prevent price filter from being applied
        filterProducts($("#searchInput").val().trim(), applyPriceFilter);
    });


    $(document).on("change", "#sortOptions", function () {
        currentSortOption = $(this).val(); // ✅ Update global sorting option
        let searchValue = $("#searchInput").val().trim();
        filterProducts(searchValue, false, 1, currentSortOption); // ✅ Pass sorting option when filtering
    });
        document.querySelectorAll(".color-filter").forEach(checkbox => {
            checkbox.addEventListener("change", function () {
                filterProducts(false);
            });
        });


       function updatePaginationSummary(currentPage, pageSize, totalRecords) {
        if (!currentPage || !pageSize || !totalRecords) {
            console.error("❌ Pagination data missing:", { currentPage, pageSize, totalRecords });
            return;
        }

        let start = (currentPage - 1) * pageSize + 1;
        let end = Math.min(currentPage * pageSize, totalRecords);
        let totalPages = Math.ceil(totalRecords / pageSize);

        $("#pagination-summary").text(`Showing ${start} - ${end} of ${totalRecords} results (Page ${currentPage} of ${totalPages})`);
    }


        function filterProducts(searchValue = "", applyPriceFilter = false, page = 1, sort = currentSortOption) {
        let selectedCategories = $(".category-filter:checked").map(function () {
            return $(this).val();
        }).get().join(",");

        let selectedBrands = $(".brand-filter:checked").map(function () {
            return $(this).val();
        }).get().join(",");

        let queryString = `?search=${encodeURIComponent(searchValue)}&page=${page}&sort=${sort}`;
        if (selectedCategories) queryString += `&categoryIds=${selectedCategories}`;
        if (selectedBrands) queryString += `&brandIds=${selectedBrands}`;

        if (applyPriceFilter) {
            let minPrice = $(".ur-pricing-range").slider("values", 0);
            let maxPrice = $(".ur-pricing-range").slider("values", 1);
            queryString += `&minPrice=${minPrice}&maxPrice=${maxPrice}`;
        }

        console.log("🔎 AJAX Request:", queryString);

        fetch("/Shop/Index" + queryString, { headers: { "X-Requested-With": "XMLHttpRequest" } })
            .then(response => response.json())
            .then(data => {
                console.log("🛍️ Products Received:", data.products.length);
                updateProductGrid(data.products, data.totalPages, page, data.totalRecords, data.pageSize);
            })
            .catch(error => console.error("❌ Error fetching products:", error));
    }




    function updateProductGrid(products, totalPages, currentPage, totalResults, itemsPerPage) {
        let productGrid = document.getElementById("productList");
        let paginationContainer = document.querySelector(".template-pagination");
        let paginationSummary = document.getElementById("pagination-summary");

        productGrid.innerHTML = "";
        paginationContainer.innerHTML = "";

        if (!Array.isArray(products) || products.length === 0) {
            productGrid.innerHTML = "<p class='text-center'>No products found</p>";
            paginationSummary.innerHTML = "";
            return;
        }

        // ✅ Update Pagination Summary
        let startItem = (currentPage - 1) * itemsPerPage + 1;
        let endItem = Math.min(startItem + itemsPerPage - 1, totalResults);
        paginationSummary.innerHTML = `Showing ${startItem} - ${endItem} of ${totalResults} results (Page ${currentPage} of ${totalPages})`;

        products.forEach(product => {
            let productHTML = `
                <div class="col-lg-4 col-md-6">
                    <div class="vr5-product-card">
                        <div class="feature-image position-relative h-300">
                            <img src="${product.imageUrl || 'default.jpg'}" alt="${product.name || 'No Name'}" class="img-fluid">
                            <div class="action-box">
                                <a href="#" class="cart-btn add-to-cart" data-id="${product.id}">Add to Cart</a>
                                <div class="action-btns">
                                    <a href="javascript:void(0)" class="wishlist-btn add-to-wishlist" data-id="${product.id}">
                                        <i class="fa-regular fa-heart"></i>
                                    </a>
                                    <a href="#" class="quick-view-btn" data-bs-toggle="modal" data-bs-target="#product_view"
                                       data-id="${product.id}"
                                       data-name="${product.name || 'No Name'}"
                                       data-image="${product.imageUrl || 'default.jpg'}"
                                       data-price="${product.price !== null ? product.price : 'N/A'}"
                                       data-description="${product.description || 'No description'}">
                                        <i class="fa-solid fa-eye"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
    <div class="product-content">
        <span class="fw-semibold subtitle text-uppercase">${product.categoryName || 'Uncategorized'}</span>

        <!-- ✅ Updated product name link -->
        <a href="javascript:void(0);" class="product-name" data-id="${product.id}">
            <h6 class="fw-semibold mt-3">${product.name || 'No Name'}</h6>
        </a>

        <p class="fs-sm mb-4">${product.description || 'No description'}</p>
        <span class="text-main-color fw-bold fs-sm">₹${product.price !== null ? product.price : 'N/A'}</span>
    </div>

                    </div>
                </div>
            `;
            productGrid.innerHTML += productHTML;
        });

            for (let i = 1; i <= totalPages; i++) {
        paginationContainer.innerHTML += `
            <li><a href="#" class="pagination-link ${(i === currentPage ? "active" : "")}" data-page="${i}">${i}</a></li>
        `;
    }

        // ✅ Reattach Events after Updating Grid
        attachPaginationEvent();
            attachWishlistEvent();
    }



        function attachPaginationEvent() {
            $(document).on("click", ".pagination-link", function (event) {
                event.preventDefault();
                let page = $(this).data("page");
                console.log("📄 Pagination Clicked:", page);

                let searchValue = $("#searchInput").val().trim();
                    filterProducts(searchValue, applyPriceFilter, page,currentSortOption);
            });
        }


            // ✅ Function to Attach Wishlist Event Dynamically
    function attachWishlistEvent() {
        $(document).off("click", ".add-to-wishlist").on("click", ".product-grid", ".add-to-wishlist", function (event) {
            event.preventDefault();

            let productId = $(this).data("id");
            let wishlistButton = $(this);

            // ✅ Prevent multiple clicks by temporarily disabling the button
            if (wishlistButton.hasClass("processing")) {
                return; // Prevent duplicate requests
            }
            wishlistButton.addClass("processing"); // Mark as processing

            console.log("🖤 Add to Wishlist Clicked! Product ID:", productId);

            $.post("/Wishlist/AddToWishlist", { productId: productId }, function (response) {
                if (response.success) {
                    alert(response.message);
                    updateWishlistCount();

                    // ✅ Prevent duplicate updates
                    if (!wishlistButton.hasClass("added")) {
                        wishlistButton.addClass("added");
                        wishlistButton.html('<i class="fa-solid fa-heart text-danger"></i>');
                    }
                } else {
                    alert(response.message);
                }
            }).fail(function () {
                alert("Error adding to wishlist. Please try again.");
            }).always(function () {
                wishlistButton.removeClass("processing"); // ✅ Re-enable after response
            });
        });
    }
        $(document).on("click", ".product-name", function () {
        let productId = $(this).data("id");

        if (!productId) {
            console.error("❌ Product ID not found.");
            return;
        }

        console.log("🔗 Redirecting to product detail. Product ID:", productId);

        // ✅ Redirect to product details page
        window.location.href = "/Product/Details/" + productId;
    });







        // ✅ Ensure Pagination Works on First Load
        attachPaginationEvent();
          
    });


</script>




<style>
    .vr5-product-card .feature-image img {
        width: 100%; /* Make image fill the container width */
        height: 250px; /* Set a fixed height */
        object-fit: cover; /* Ensures image fits without stretching */
        border-radius: 5px; /* Optional: Adds rounded corners */
    }

    #modalProductImage {
        width: 100%; /* Ensures the image fills the modal */
        height: 300px; /* Set a fixed height */
        object-fit: cover; /* Prevents stretching */
        border-radius: 5px; /* Optional: Adds smooth edges */
    }

</style>
